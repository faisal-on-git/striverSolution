//Link=https://leetcode.com/problems/clone-graph

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    
     HashMap<Integer,Node> hm=new HashMap<>();
    public Node cloneGraph(Node node) {
        return cloneHelper(node);
       
    }
    
    public Node cloneHelper(Node node){
        if(node ==null){
            return null;
        }
        if(hm.containsKey(node.val)){
            return hm.get(node.val);
        }
        
        Node cloneNode=new Node(node.val,new ArrayList<Node>());
        hm.put(node.val,cloneNode);
        for(Node n:node.neighbors){
            cloneNode.neighbors.add(cloneHelper(n));
            
        }
        return cloneNode;
    }
}
