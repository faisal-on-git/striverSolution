
//link=https://practice.geeksforgeeks.org/problems/bfs-traversal-of-graph/1#



class Solution {
    // Function to return Breadth First Traversal of given graph.
    
  
    
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited = new boolean [adj.size()];
      //  System.out.println(adj.size());
        for(int i=0;i<visited.length;i++){
            visited[i]=false;
        }
        ArrayList<Integer> ans=new ArrayList<>();
          Queue<Integer> q=new ArrayDeque<>();
          q.add(0);
         while(q.size()>0){
             int val=q.remove();
              ans.add(val);
             visited[val]=true;
             
            
             for(int v:adj.get(val)){
                 if(visited[v]==false){
                 q.add(v);
                 visited[v]=true;
                 }
             }
             
             }
         
         return ans;
        
        
    }
}
// public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
//         // Code here
//         ArrayList<Integer> ans=new ArrayList<>();
//           Queue<Integer> q=new ArrayDeque<>();
//           q.add(0);
//          while(q.size()>0){
//              int val=q.remove();
//              if(!ans.contains(val)){
// here instead of checking again and again we can have a visited array so that we dont insert same elemnt again (for example if 2 is neighbour of 1 and we move to 2 from 1 ,1 will also be neighbour of 2 so we will insert that node again so visited will prevent us from doing that)
//              ans.add(val);
//              for(int v:adj.get(val)){
//                  q.add(v);
//              }
//              }
//          }
//          return ans;
        
        
//     }
