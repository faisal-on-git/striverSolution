//link=https://practice.geeksforgeeks.org/problems/number-of-coins1824/1/
//linkLeetCode=https://leetcode.com/problems/coin-change/


class Solution {
    public int coinChange(int[] coins, int amount) {
        
        //solution on the basis of unbounded knapsack
        
        
//         int [] dp=new int[amount+1];
//         for(int i=1;i<dp.length;i++){
//             int min=Integer.MAX_VALUE;
//             // System.out.println(min);
//             for(int j=0;j<coins.length;j++){
//                 if(coins[j]<=i){
//                   int  rdeno=i-coins[j];
//                  int   mrdc=dp[rdeno];
//                     int temp=Integer.MAX_VALUE;
//                     if(mrdc!=Integer.MAX_VALUE){
//                           temp=mrdc+1;
//                     }
                  
//                     if(temp<min){
//                         min=temp;
//                     }
//                 }
//             }
//             dp[i]=min;
//         }
//         int ans=dp[amount];
//         if(ans==Integer.MAX_VALUE){
//             return -1;
//         }
//         else{
//             return ans;
//         }
        
//     }
        
        
        
   // better solution tabulation    
        
        int [][] dp=new int[coins.length+1][amount+1];
        int n=coins.length;
        for(int i=0;i<=n;i++){
            for(int j=0;j<=amount;j++){
                
                if(j==0){
                    dp[i][j]=0;
                }
                    else if(i==0){
                        dp[i][j]=(int)1e5;
                    }
                    else if(coins[i-1]>j){
                        dp[i][j]=dp[i-1][j];
                    }
                    else{
                        dp[i][j]=Math.min(1+dp[i][j-coins[i-1]],dp[i-1][j]);
                    }
                }
               
            }
         return dp[n][amount]>(int)1e4?-1:dp[n][amount];
        }
        
        
        
        
}
